/*
    dp[i]를 i자리의 이진수 중 이친수의 갯수라고 생각한다.

    이친수는 0으로 시작할 수 없고, 1이 두 번 연속으로 사용될 수 없으므로, 이친수인 이진수는 무조건 '10'으로 시작할 수 밖에 없다.

    1자리 이친수 -> 1
    2자리 이친수 -> 10
    3자리 이친수 -> 100, 101

    만약 4자리 이친수는 어떻게 될까?
    이친수는 무조건 '10'으로 시작되므로 '10' + 2자리의 0과 1의 조합이 올 수 있다. 
    00, 01, 10, 11 중 11은 이친수의 조건에 맞지 않으므로 결국 1000, 1001, 1010만 가능하다.

    1000은 '10'에 3자리의 이친수 100을 뒤에서부터 2자리만 잘라서 더한 수이고,
    1001은 '10'에 3자리의 이친수 101을 뒤에서부터 2자리만 잘라서 더한 수이고,
    1010은 '10'에 2자리의 이친수 10을 뒤에서부터 2자리만 잘라서 더한 수이다.

    자리수가 커져도 [자리수 - 1]의 이친수의 수와 [자리수 - 2]의 이친수의 수를 더한 값이 결국 해당 자리수의 이친수의 수가된다.
*/
#include <iostream>

using namespace std;

int n;
long long dp[91];

int main(void) {
    cin >> n;

    dp[0] = 0;
    dp[1] = 1;

    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }

    cout << dp[n] << "\n";

    return 0;
}